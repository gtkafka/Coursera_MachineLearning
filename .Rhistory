add2 <- function(x, y) {
x + y
}
add2(5,6)
View(add2)
function(x, y) {
x + y
}
above10 <- function(x) {
use  <- x > 10
x[use]
}
above <- function(x, n){
use <- x > n
x[use]
}
x <- 1:20
above(x, 12)
args(above2)
arg(above2)
args(paste)
args(cat)
args(plot)
install.packages("kernlab")
?order
library(kernlab)
library(caret)
install.packages("quantreg")
library(caret)
data(spam)
inTrain<-createDataPartition(y=spam$type, p=0.75, list=F)
training<-spam[inTrain,]
testing<-spam[-inTrain,]
dim(training)
head(spam)
head(spam)
training
testing
inTrain
set.seed(32343)
head(spam)
type$spam
spam[, "type"]
if (spam[, "type"]==nonspam) {}
count(spam, "type")
library(plyr)
count(spam, "type")
modelFit <- train(type ~.,data=training, method="glm")
library(caret)
library(kernlab)
modelFit <- train(type ~.,data=training, method="glm")
install.packages(e1071)
install.packages("e1071")
modelFit <- train(type ~.,data=training, method="glm")
warnings()
modelFit
modelFit$finalModel
predictions <- predict(modelFit, newdata=testing)
predictions
confusionMatrix(predictions, testing$type)
inTrain<-createDataPartition(y=spam$type, p=0.75, list=FALSE)
dim(testing)
dim(inTrain)
dim(-inTrain)
install.packages("ISLR")
library(ISLR); library(ggplot2 ); library(caret)
date(Wage)
data(Wage)
str(Wage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=F)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
featurePlot(x=training[, c("age", "education", "jobclass")],
y=training$wage, plot="pairs")
qplot(age, wage, color=jobclass, data=training)
qq <- qplot(age, wage, color=education, data=training)
qq + geom_smooth(method='lm', formula=y~x)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
cutWage<-cut2(training$wage, g=3)
table(cutWage)
cutWage<-cut2(training$wage, g=10)
table(cutWage)
p1 <-qplot(cutWage, age, data=training, fill=cutWage, geom=c("boxplot"))
p1
p1 <-qplot(cutWage, age, data=training, fill=cutWage, geom=c("jitter", "boxplot"))
p1
p1 <-qplot(cutWage, age, data=training, fill=cutWage, geom=c("jitter", "boxplot"), alpha=0.6)
p1
library(AppliedPrideictiveModeling)
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
?createDataPartition
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer)
hist(training$Superplasticizer)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(Superplasticizer, data=training)
ggplot(data=training, aes(x=Superplasticizer)) + geom_histogram() + theme_bw()
ss<-training[, grep("^IL", x=names(training))]
preProc <- preProcess(ss, method='pca', thresh=0.9, outcome=training$diagnosis)
preProc <- preProcess(ss, method='pca', thresh=0.9,
outcome=training$diagnosis)
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh=0.9,
outcome=training$diagnosis)
diagnosis
predictors
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p=3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh=0.9,
outcome=training$diagnosis)
preProc$rotation # 9
dim(diagnosis)
dim(predictors)
adData
str(adData)
summary(adData)
head(adData)
names(training)
ss <- training[,grep('^IL', x = names(training) )]
ss
setwd(Coursera_pracmachlearn)
dir()
setwd(Coursera_predmachlearn)
setwd("Coursera_predmachlearn/final")
didr()
dir()
dat <-read.csv("pml-training.csv")
head(dat)
dim(dat)
The Weight Lifting Exercise Dataset (WLE) as one of the Human Activity Recognition (HAR) systems predicts which activity was performed at a specific time. In the following demonstration we would like to qualify the determined task to let users know how **well** a task was performed.
The Weight Lifting Exercise Dataset (WLE) as one of the Human Activity Recognition (HAR) systems predicts which activity was performed at a specific time. In the following demonstration we would like to qualify the determined task to let users know how *well* a task was performed.
The Weight Lifting Exercise Dataset (WLE) as one of the Human Activity Recognition (HAR) systems predicts which activity was performed at a specific time. In the following demonstration we would like to qualify the determined task to let users know how well a task was performed.
---
title: "Predictive Machine Learning Project"
output: html_document
---
The Weight Lifting Exercise Dataset (WLE) as one of the Human Activity Recognition (HAR) systems predicts which activity was performed at a specific time. In the following demonstration we would like to qualify the determined task to let users know how well a task was performed.
```{r, echo=FALSE}
dat <-read.csv("pml-training.csv")
isAnyMissing <- sapply(dat, function (x) any(is.na(x) | x == ""))
head(isAnyMissing)
```
dat <-read.csv("pml-training.csv")
isAnyMissing <- sapply(dat, function (x) any(is.na(x) | x == ""))
head(isAnyMissing)
dim(isAnyMissing)
length(isAnyMissing)
dim(dat)
isAnyMissing <- apply(dat, function (x) any(is.na(x) | x == ""))
isAnyMissing <- sapply(dat, function (x) any(is.na(x) | x == ""))
isAnyMissing
isAnyMissing
vec<-[1,2,3,4,'','',NA]
vec<-c(1,2,3,4,'','',NA)
vec.nas<-is.na(vec)
vec.nas
vec.null<-is.null(vec)
vec.null
vec.null<- sapply(vec, function(x), is.null(x))
vec.null<- sapply(vec function(x) is.null(x))
vec.null<- sapply(vec, function(x) is.null(x))
vec.null
vec.null<- sapply(vec, function(x) is.null(x) | x == '')
vec.null
vec.null<- sapply(vec, function(x) is.na(x) | x == '')
vec.null
vec.null<- sapply(vec, function(x) length(is.na(x) | x == '')>4)
vec.null
vec.null<- sapply(vec, function(x) length(is.na(x) | x == '')>2)
vec.null
vec.null<- sapply(vec, function(x) length(is.na(x) | x == ''))
vec.null
vec.null<- sapply(vec, function(x) length(is.na(x) | x == ''))
sum(vec ="")
sum(vec =="")
vec
sapply(vec, function(x) sum(x == ''))
sapply(vec, function(x) length(x == ''))
sapply(vec, function(x) sum(x == ''))
sapply(vec, 1 function(x) sum(x == ''))
apply(vec, function(x) sum(x == ''))
lapply(vec, function(x) sum(x == ''))
slapply(vec, function(x) sum(x == ''))
sapply(vec, function(x) sum(x == ''))
vec1 <- rbind(vec, c(NA, NA, NA, NA, NA, NA, NA))
vec1
vec2 <- rbind(vec1, c('', '', '', '', '', '', ''))
vec2
sapply(vec, function(x) sum(x == ''))
sapply(vec2, function(x) sum(x == ''))
vec3 <-data.frame(vec2)
vec3
sapply(vec3, function(x) sum(x == ''))
vec3
sapply(vec3, function(x) sum(is.na(x)))
sapply(vec3, function(x) sum(x==''))
sapply(vec3, function(x) (x==''))
sapply(vec3, function(x) is.na(x))
sapply(vec3, function(x) sum(is.na(x) | x==''))
vec4 <- sapply(vec3, function(x) if(sum(is.na(x) | x==''))==2)
vec4 <- sapply(vec3, function(x) if(sum(is.na(x) | x=='')==2)
)
vec4 <- sapply(vec3, function(x) if(sum(is.na(x) | x=='') == 2))
vec4 <- sapply(vec3, function(x) if(sum(is.na(x) | x=='') == 2))
vec4 <- sapply(vec3, function(x) if(sum(is.na(x) | x=='') == 2){})
vec4
vec4 <- sapply(vec3, function(x) if(sum(is.na(x) | x=='') == 2){x})
vec4
vec4 <- sapply(vec3, function(x) if(sum(is.na(x) | x=='') == 2){return T}else{return FALSE})
vec4 <- sapply(vec3, function(x) if(sum(is.na(x) | x=='') == 2){return(TRUE)}else{return(FALSE)})
vec4
datgood<-vec[,vec4]
dim(vec)
dim(vec4)
length(vec)
length(vec4)
datgood<-vec1[,vec4]
datgood
vec1
train
library(caret)
train <-read.csv("pml-training.csv")
incompleteData <- sapply(colnames(train), function(x) if(sum(is.na(train[, x]) | train[, x] == '') > 0.5*nrow(train)){return(TRUE)}else{return(FALSE)})
train <- train[, !incompleteData]
cor <- abs(sapply(colnames(train[, -ncol(train)]), function(x) cor(as.numeric(train[, x]), as.numeric(train$classe), method="spearman")))
train
nzv <- nearZeroVar(train, saveMetrics=TRUE)
?cor
?nearZeroVar
nzv
cor <- abs(sapply(colnames(train[, -ncol(train)]), function(x) cor(as.numeric(train[, x]), as.numeric(train$classe), method="spearman")))
summary(cor)
plot(train[, names(which.max(cor))], train[, names(which.max(cor[-which.max(cor)]))], col = train$classe, pch = 19, cex = 0.1, xlab = names(which.max(cor)), ylab = names(which.max(cor[-which.max(cor)])))
cor <- abs(sapply(colnames(train[, -ncol(train)]), function(x) cor(as.numeric(train[, x]), as.numeric(train$classe), method="pearson")))
plot(train[, names(which.max(cor))], train[, names(which.max(cor[-which.max(cor)]))], col = train$classe, pch = 19, cex = 0.1, xlab = names(which.max(cor)), ylab = names(which.max(cor[-which.max(cor)])))
cor <- abs(sapply(colnames(train[, -ncol(train)]), function(x) cor(as.numeric(train[, x]), as.numeric(train$classe), method="pearson")))
plot(train[, names(which.max(cor))], train[, names(which.max(cor[-which.max(cor)]))], col = train$classe, pch = 19, cex = 0.1, xlab = names(which.max(cor)), ylab = names(which.max(cor[-which.max(cor)])))
?plot
colnames(train)
rm(list = ls())
train
library(caret)
trainer <-read.csv("pml-training.csv")
colnames(trainer)
head(trainer$X)
trainer$X
library(caret)
nsv<-nearZeroVar(trainer, saveMetrics=TRUE))
nsv<-nearZeroVar(trainer, saveMetrics=TRUE)
trainer <-trainer[, !nsv]
nsv
trainer <-trainer[, nsv]
trainer <-trainer[, -nsv]
trainer <-trainer[,-nsv]
trainer[,-nsv]
trainer[,nsv]
dim(trainer)
dim(nsv)
trainer[,-nzv]
trainer <-trainer[,-nsv$nzv]
trainer
colnames(trainer)
dim(trainer)
library(caret)
trainer <-read.csv("pml-training.csv")
nsv <- nearZeroVar(trainer, saveMetrics=TRUE)
trainer[,-nsv]
trainer[,-nsv$nzv]
dim(trainer)
trainer1<-trainer[,-nsv$nzv]
dim(trainer1)
trainer1<-trainer[,nsv$nzv]
dim(trainer1)
colnames(trainer1)
trainer1
incompleteData <- sapply(colnames(trainer), function(x) if(sum(is.na(trainer[, x]) | trainer[, x] == '') > 0.5*nrow(trainer)){return(TRUE)}else{return(FALSE)})
_trainer <- trainer[, !incompleteData]
trainer. <- trainer[, !incompleteData]
trainer.a <- trainer[, !incompleteData]
trainer.a
colnames(trainer.a)
trainer.a$user_name
colnames(trainer.a)
drop <- c("X", "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp", "new_window", "num_window")
train.c <- train[, !(names(train) %in% drop)]
type(train)
?type
typeof(train)
train.c <- data.frame(train.a)
train.c <- data.frame(train)
typeof(train.c)
train.c <- train[, !(names(train) %in% drop)]
train.c <- train.c[, !(names(train.c) %in% drop)]
colnames(train.c)
head(train.c)
?train
library(caret)
trainer <-read.csv("pml-training.csv")
rm(list = ls())
library(caret)
trainer <-read.csv("pml-training.csv")
typeof(trainer)
drop <- c("X", "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp", "new_window", "num_window")
trainer <- trainer[, !(names(trainer) %in% drop)]
incompleteData <- sapply(colnames(trainer), function(x) if(sum(is.na(trainer[, x]) | trainer[, x] == '') > 0.5*nrow(train)){return(TRUE)}else{return(FALSE)})
trainer <- trainer[, !incompleteData]
incompleteData <- sapply(colnames(trainer), function(x) if(sum(is.na(trainer[, x]) | trainer[, x] == '') > 0.5*nrow(trainer)){return(TRUE)}else{return(FALSE)})
colnames(trainer)
cor <- abs(sapply(colnames(trainer[, -ncol(trainer)]), function(x) cor(as.numeric(trainer[, x]), as.numeric(train$classe), method="spearman")))
typeof(trainer)
dim(trainer)
cor <- abs(sapply(colnames(trainer[, -ncol(trainer)]), function(x) cor(as.numeric(trainer[, x]), as.numeric(trainer$classe), method="spearman")))
cor
plot(train[, names(which.max(cor))], train[, names(which.max(cor[-which.max(cor)]))], col = trainer$classe, pch = 19, cex = 0.1, xlab = names(which.max(cor)), ylab = names(which.max(cor[-which.max(cor)])))
plot(trainer[, names(which.max(cor))], trainer[, names(which.max(cor[-which.max(cor)]))], col = trainer$classe, pch = 19, cex = 0.1, xlab = names(which.max(cor)), ylab = names(which.max(cor[-which.max(cor)])))
nsv
nsv <- nearZeroVar(training, saveMetrics=TRUE)
library(caret)
training <-read.csv("pml-training.csv")
nsv <- nearZeroVar(training, saveMetrics=TRUE)
training <- training[, nsv]
nsv
